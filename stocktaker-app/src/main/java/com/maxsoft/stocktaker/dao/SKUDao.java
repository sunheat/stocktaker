package com.maxsoft.stocktaker.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.maxsoft.stocktaker.dao.SKU;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SKU.
*/
public class SKUDao extends AbstractDao<SKU, Long> {

    public static final String TABLENAME = "SKU";

    /**
     * Properties of entity SKU.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Barcode = new Property(1, String.class, "barcode", false, "BARCODE");
        public final static Property ShortName = new Property(2, String.class, "shortName", false, "SHORT_NAME");
        public final static Property BrandID = new Property(3, Long.class, "brandID", false, "BRAND_ID");
        public final static Property SizeID = new Property(4, Long.class, "sizeID", false, "SIZE_ID");
        public final static Property CategoryID = new Property(5, Long.class, "categoryID", false, "CATEGORY_ID");
    };

    private DaoSession daoSession;

    private Query<SKU> brand_SKUListQuery;
    private Query<SKU> commodityCategory_SKUListQuery;

    public SKUDao(DaoConfig config) {
        super(config);
    }
    
    public SKUDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SKU' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BARCODE' TEXT," + // 1: barcode
                "'SHORT_NAME' TEXT," + // 2: shortName
                "'BRAND_ID' INTEGER," + // 3: brandID
                "'SIZE_ID' INTEGER," + // 4: sizeID
                "'CATEGORY_ID' INTEGER);"); // 5: categoryID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SKU'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SKU entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(2, barcode);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(3, shortName);
        }
 
        Long brandID = entity.getBrandID();
        if (brandID != null) {
            stmt.bindLong(4, brandID);
        }
 
        Long sizeID = entity.getSizeID();
        if (sizeID != null) {
            stmt.bindLong(5, sizeID);
        }
 
        Long categoryID = entity.getCategoryID();
        if (categoryID != null) {
            stmt.bindLong(6, categoryID);
        }
    }

    @Override
    protected void attachEntity(SKU entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SKU readEntity(Cursor cursor, int offset) {
        SKU entity = new SKU( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // barcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shortName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // brandID
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // sizeID
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // categoryID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SKU entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShortName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrandID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSizeID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCategoryID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SKU entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SKU entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sKUList" to-many relationship of Brand. */
    public List<SKU> _queryBrand_SKUList(Long brandID) {
        synchronized (this) {
            if (brand_SKUListQuery == null) {
                QueryBuilder<SKU> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BrandID.eq(null));
                brand_SKUListQuery = queryBuilder.build();
            }
        }
        Query<SKU> query = brand_SKUListQuery.forCurrentThread();
        query.setParameter(0, brandID);
        return query.list();
    }

    /** Internal query to resolve the "sKUList" to-many relationship of CommodityCategory. */
    public List<SKU> _queryCommodityCategory_SKUList(Long categoryID) {
        synchronized (this) {
            if (commodityCategory_SKUListQuery == null) {
                QueryBuilder<SKU> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CategoryID.eq(null));
                commodityCategory_SKUListQuery = queryBuilder.build();
            }
        }
        Query<SKU> query = commodityCategory_SKUListQuery.forCurrentThread();
        query.setParameter(0, categoryID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBrandDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getSizeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getCommodityCategoryDao().getAllColumns());
            builder.append(" FROM SKU T");
            builder.append(" LEFT JOIN BRAND T0 ON T.'BRAND_ID'=T0.'_id'");
            builder.append(" LEFT JOIN SIZE T1 ON T.'SIZE_ID'=T1.'_id'");
            builder.append(" LEFT JOIN COMMODITY_CATEGORY T2 ON T.'CATEGORY_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected SKU loadCurrentDeep(Cursor cursor, boolean lock) {
        SKU entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Brand brand = loadCurrentOther(daoSession.getBrandDao(), cursor, offset);
        entity.setBrand(brand);
        offset += daoSession.getBrandDao().getAllColumns().length;

        Size size = loadCurrentOther(daoSession.getSizeDao(), cursor, offset);
        entity.setSize(size);
        offset += daoSession.getSizeDao().getAllColumns().length;

        CommodityCategory category = loadCurrentOther(daoSession.getCommodityCategoryDao(), cursor, offset);
        entity.setCategory(category);

        return entity;    
    }

    public SKU loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<SKU> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<SKU> list = new ArrayList<SKU>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<SKU> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<SKU> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
