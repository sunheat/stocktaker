package com.maxsoft.stocktaker.dao;

import com.maxsoft.stocktaker.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table STOCKTAKING_RECORD.
 */
public class StocktakingRecord {

    private Long id;
    private java.util.Date recordDate;
    private Integer quantity;
    private java.util.Date expirationDate;
    private Long skuID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StocktakingRecordDao myDao;

    private SKU sku;
    private Long sku__resolvedKey;


    public StocktakingRecord() {
    }

    public StocktakingRecord(Long id) {
        this.id = id;
    }

    public StocktakingRecord(Long id, java.util.Date recordDate, Integer quantity, java.util.Date expirationDate, Long skuID) {
        this.id = id;
        this.recordDate = recordDate;
        this.quantity = quantity;
        this.expirationDate = expirationDate;
        this.skuID = skuID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStocktakingRecordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getRecordDate() {
        return recordDate;
    }

    public void setRecordDate(java.util.Date recordDate) {
        this.recordDate = recordDate;
    }

    public Integer getQuantity() {
        return quantity;
    }

    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }

    public java.util.Date getExpirationDate() {
        return expirationDate;
    }

    public void setExpirationDate(java.util.Date expirationDate) {
        this.expirationDate = expirationDate;
    }

    public Long getSkuID() {
        return skuID;
    }

    public void setSkuID(Long skuID) {
        this.skuID = skuID;
    }

    /** To-one relationship, resolved on first access. */
    public SKU getSku() {
        Long __key = this.skuID;
        if (sku__resolvedKey == null || !sku__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SKUDao targetDao = daoSession.getSKUDao();
            SKU skuNew = targetDao.load(__key);
            synchronized (this) {
                sku = skuNew;
            	sku__resolvedKey = __key;
            }
        }
        return sku;
    }

    public void setSku(SKU sku) {
        synchronized (this) {
            this.sku = sku;
            skuID = sku == null ? null : sku.getId();
            sku__resolvedKey = skuID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
