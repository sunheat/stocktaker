package com.maxsoft.stocktaker.dao;

import java.util.List;
import com.maxsoft.stocktaker.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SKU.
 */
public class SKU {

    private Long id;
    private String barcode;
    private String shortName;
    private Long brandID;
    private Long sizeID;
    private Long categoryID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SKUDao myDao;

    private Brand brand;
    private Long brand__resolvedKey;

    private Size size;
    private Long size__resolvedKey;

    private CommodityCategory category;
    private Long category__resolvedKey;

    private List<StocktakingRecord> stocktakingRecordList;

    public SKU() {
    }

    public SKU(Long id) {
        this.id = id;
    }

    public SKU(Long id, String barcode, String shortName, Long brandID, Long sizeID, Long categoryID) {
        this.id = id;
        this.barcode = barcode;
        this.shortName = shortName;
        this.brandID = brandID;
        this.sizeID = sizeID;
        this.categoryID = categoryID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSKUDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getBarcode() {
        return barcode;
    }

    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    public String getShortName() {
        return shortName;
    }

    public void setShortName(String shortName) {
        this.shortName = shortName;
    }

    public Long getBrandID() {
        return brandID;
    }

    public void setBrandID(Long brandID) {
        this.brandID = brandID;
    }

    public Long getSizeID() {
        return sizeID;
    }

    public void setSizeID(Long sizeID) {
        this.sizeID = sizeID;
    }

    public Long getCategoryID() {
        return categoryID;
    }

    public void setCategoryID(Long categoryID) {
        this.categoryID = categoryID;
    }

    /** To-one relationship, resolved on first access. */
    public Brand getBrand() {
        Long __key = this.brandID;
        if (brand__resolvedKey == null || !brand__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BrandDao targetDao = daoSession.getBrandDao();
            Brand brandNew = targetDao.load(__key);
            synchronized (this) {
                brand = brandNew;
            	brand__resolvedKey = __key;
            }
        }
        return brand;
    }

    public void setBrand(Brand brand) {
        synchronized (this) {
            this.brand = brand;
            brandID = brand == null ? null : brand.getId();
            brand__resolvedKey = brandID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Size getSize() {
        Long __key = this.sizeID;
        if (size__resolvedKey == null || !size__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SizeDao targetDao = daoSession.getSizeDao();
            Size sizeNew = targetDao.load(__key);
            synchronized (this) {
                size = sizeNew;
            	size__resolvedKey = __key;
            }
        }
        return size;
    }

    public void setSize(Size size) {
        synchronized (this) {
            this.size = size;
            sizeID = size == null ? null : size.getId();
            size__resolvedKey = sizeID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public CommodityCategory getCategory() {
        Long __key = this.categoryID;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CommodityCategoryDao targetDao = daoSession.getCommodityCategoryDao();
            CommodityCategory categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(CommodityCategory category) {
        synchronized (this) {
            this.category = category;
            categoryID = category == null ? null : category.getId();
            category__resolvedKey = categoryID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StocktakingRecord> getStocktakingRecordList() {
        if (stocktakingRecordList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StocktakingRecordDao targetDao = daoSession.getStocktakingRecordDao();
            List<StocktakingRecord> stocktakingRecordListNew = targetDao._querySKU_StocktakingRecordList(id);
            synchronized (this) {
                if(stocktakingRecordList == null) {
                    stocktakingRecordList = stocktakingRecordListNew;
                }
            }
        }
        return stocktakingRecordList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStocktakingRecordList() {
        stocktakingRecordList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
